import logging
from logging.handlers import TimedRotatingFileHandler
from datetime import datetime
import os

# Trading API Configurations
api_config = {
    "userId": 12345,
    "password": "your_password_here",  # Remember to securely manage sensitive data!
    "api_url": "https://api.xtb.com",  # Example API URL
    # Add any other necessary parameters here
}

def config_logs(log_directory='logs', log_level=logging.INFO, log_format=None):
    """
    Configures logging with console and file logging, including timed rotation.

    :param log_directory: Directory where log files are stored (default: 'logs').
    :param log_level: Logging level (default: logging.INFO).
    :param log_format: Custom log format (default: timestamp, level, function name, message).
    """
    # Ensure the log directory exists
    os.makedirs(log_directory, exist_ok=True)

    # Log filename dynamically generated by date
    log_filename = f"log_{datetime.now().strftime('%Y-%m-%d')}.log"
    log_path = os.path.join(log_directory, log_filename)

    # Set the log format
    if log_format is None:
        log_format = '%(asctime)s - %(levelname)s - %(funcName)s - %(message)s'
    formatter = logging.Formatter(log_format, datefmt='%H:%M')

    # File handler for saving logs with daily rotation
    file_handler = TimedRotatingFileHandler(log_path, when="midnight", interval=1, backupCount=7)
    file_handler.setLevel(log_level)
    file_handler.setFormatter(formatter)

    # Console handler for terminal output
    console_handler = logging.StreamHandler()
    console_handler.setLevel(log_level)
    console_handler.setFormatter(formatter)

    # Create and configure logger
    logger = logging.getLogger("portfolio_manager_logger")
    logger.setLevel(log_level)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    logger.info("Logging setup completed.")

    return logger
